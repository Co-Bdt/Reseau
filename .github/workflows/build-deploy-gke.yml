# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  [workflow_dispatch]
  #push:
  #  branches: [ "main" ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_LOCATION: europe-west1
  GKE_CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: europe-west1-b
  DEPLOYMENT_NAME: reseau-deployment
  REGISTRY: ghcr.io
  IMAGE_NAME: co-bdt/reseau
  MAJOR: ${{ secrets.MAJOR_VERSION }}
  MINOR: ${{ secrets.MINOR_VERSION }}
  NEW_PATCH_VERSION: ${{ secrets.MINOR_VERSION }}
  REPO_ACCESS_TOKEN: ${{ secrets.ACTIONS_ACCESS_TOKEN }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: main

    #- name: Increment a new patch version 
    #  run: |-
    #    echo $MINOR
    #    echo "NEW_PATCH_VERSION=$((${{ secrets.MINOR_VERSION }}+1))" >> $GITHUB_ENV
    #    echo $NEW_PATCH_VERSION

    # Increment the Docker image version
    #- name: Increment Minor version
    #  uses: hmanzur/actions-set-secret@v2.0.0
    #  with:
    #    name: 'MINOR_VERSION'
    #    value: $MINOR
    #    repository: Co-Bdt/Reseau
    #    token: ${{ secrets.GITHUB_TOKEN }}

    # Build the Docker image
    #- name: Build
    #  run: |-
    #    docker build \
    #      --tag "$REGISTRY/$IMAGE_NAME:$MAJOR.5" \
    #      --file reseau/app.Dockerfile \
    #      reseau/.

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: reseau/
        file: reseau/app.Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.MAJOR }}.5

    # Login to GitHub Artifact Registry
    #- name: Login
    #  env:
    #    TOKEN: ${{ env.REPO_ACCESS_TOKEN }}
    #  run: |-
    #    docker login ghcr.io/co-bdt \
    #      --username Co-Bdt
    #      --password $TOKEN

    # Push the Docker image to GitHub Artifact Registry
    #- name: Publish
    #  run: |-
    #    docker push "$IMAGE:$MAJOR.5"

    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: 'projects/758161621186/locations/global/workloadIdentityPools/github-actions/providers/reseau-gh-repo'

    # Required for downloading GKE cloud auth plugin
    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    # This plugin seems to be necessary in order to use Kubernetes API and therefore, Helm
    - name: Setup GKE GCloud Auth plugin
      run: |-
        gcloud components install gke-gcloud-auth-plugin
        gke-gcloud-auth-plugin --version

    #- name: Docker configuration
    #  run: |-
    #    echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev

    # Get the GKE credentials so we can deploy to the cluster
    - name: Get cluster credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ env.GKE_CLUSTER_NAME }}
        location: ${{ env.GCP_LOCATION }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Package Chart
      run: |-
        cd helm
        ls -la
        helm package reseau

    - name: Deploy Chart
      run: |-
        helm upgrade reseau helm/reseau-*.tgz --wait --dry-run
        
    - name: Verify deployment
      run: |-
        helm list
    
    # Set up kustomize
    #- name: Set up Kustomize
    #  run: |-
    #    curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
    #    chmod u+x ./kustomize
    
    # Deploy the Docker image to the GKE cluster
    #- name: Deploy
    #  run: |-
    #    # replacing the image name in the k8s template
    #    ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
    #    ./kustomize build . | kubectl apply -f -
    #    kubectl rollout status deployment/$DEPLOYMENT_NAME
    #    kubectl get services -o wide
